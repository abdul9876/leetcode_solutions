/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    
    public ListNode sortList(ListNode head) {
     int count = 0;
     ListNode temp = head;
     while(temp!=null){
        count++;
        temp = temp.next;
     }   
     int[] a = new int[count];
     temp = head;
  
     for(int i =0; i<count; i++){
        a[i] = temp.val;
        temp = temp.next;
      }
      Arrays.sort(a);
    //   int temp1 = 0;                                                                        // brute force
    //   for(int i =0; i<count-1; i++){
    //     for(int j =i+1; j<count;j++){
    //         if(a[j]<a[i]){
    //             temp1 = a[i];
    //             a[i] = a[j];
    //             a[j] = temp1;
    //         }
    //     }
    //   }
      temp = head;
      for(int i =0; i<count;i++){
        temp.val = a[i];
        if(temp!=null) temp = temp.next;
      }
      return head;
    }
}



// The optimised solution using merge sort
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode findmiddle(ListNode head){
        ListNode slow = head;
        ListNode fast = head.next;
        while(fast!=null&&fast.next!=null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    public ListNode merge(ListNode head1, ListNode head2){
        ListNode dummy = new ListNode(-1);
        ListNode temp = dummy;
        while(head1!=null && head2!=null){
            if(head1.val<head2.val){
                temp.next = head1;
                temp = head1;
                head1 = head1.next;
            }
            else{
                temp.next = head2;
                temp = head2;
                head2 = head2.next;
            }
       

        }
             if(head1!=null){
                temp.next = head1;
            }
            if(head2!=null){
                temp.next = head2;
            }
        return dummy.next;
    }
    public ListNode sortList(ListNode head) {
        if(head==null || head.next==null){
            return head;
        }
        ListNode middle = findmiddle(head);
        ListNode left = head;
        ListNode right = middle.next;
        middle.next = null;
        left = sortList(left);
        right = sortList(right);
        return merge(left, right);
    }
}
