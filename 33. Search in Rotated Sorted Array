class Solution {
public:
    int search(vector<int>& nums, int target) {
    for(int i = 0;i<nums.size();i++){
        if(nums[i]==target){
            return i;
        }

    }
        return -1;
    }

};
// this is not the solution but it works and this has to be rotated so i think there is a problem in the code itself which leet code has provided.
// this is the actual code not there in the leet code
import java.util.*;

public class tUf {
    public static int search(ArrayList<Integer> arr, int n, int k) {
        int low = 0, high = n - 1;
        while (low <= high) {
            int mid = (low + high) / 2;

            // if mid points to the target
            if (arr.get(mid) == k)
                return mid;

            // if left part is sorted
            if (arr.get(low) <= arr.get(mid)) {
                if (arr.get(low) <= k && k <= arr.get(mid)) {
                    // element exists
                    high = mid - 1;
                } else {
                    // element does not exist
                    low = mid + 1;
                }
            } else { // if right part is sorted
                if (arr.get(mid) <= k && k <= arr.get(high)) {
                    // element exists
                    low = mid + 1;
                } else {
                    // element does not exist
                    high = mid - 1;
                }
            }
        }
        return -1;
    }
